###############################################################################
#  Copyright (c) 2016-2023 Joel de Guzman
#
#  Distributed under the MIT License (https://opensource.org/licenses/MIT)
###############################################################################
cmake_minimum_required(VERSION 3.7.2...3.15.0)

cmake_policy(SET CMP0135 NEW)

add_library(libunibreak
   external/libunibreak/src/emojidef.c
   external/libunibreak/src/graphemebreak.c
   external/libunibreak/src/linebreak.c
   external/libunibreak/src/linebreakdata.c
   external/libunibreak/src/linebreakdef.c
   external/libunibreak/src/unibreakbase.c
   external/libunibreak/src/unibreakdef.c
   external/libunibreak/src/wordbreak.c
)

target_include_directories(
   libunibreak
   PUBLIC
      external/libunibreak/src
)

if (WIN32)
   target_compile_definitions(libunibreak
      PUBLIC
         WIN32_LEAN_AND_MEAN
         NOMINMAX
         _UNICODE
   )
   set_property(TARGET libunibreak PROPERTY
      MSVC_RUNTIME_LIBRARY "MultiThreaded"
   )
endif()

if (ARTIST_SKIA)

   ############################################################################
   # Prebuilt binaries
   ############################################################################
   if (APPLE)

      find_package(PkgConfig REQUIRED)
      pkg_check_modules(fontconfig REQUIRED IMPORTED_TARGET fontconfig)

      if (${CMAKE_OSX_ARCHITECTURES} STREQUAL "arm64")
         set(ARTIST_BINARIES ${CMAKE_CURRENT_BINARY_DIR}/macos/arm64/src/prebuilt_binaries)
         set(ARTIST_BINARIES_URL https://github.com/cycfi/artist/raw/prebuilt_binaries_0.90/macos/skia/arm64/arm64.zip)
         set(ARTIST_BINARIES_MD5 5a8b2ef69844bdfff8f384538b63a962)
      elseif (${CMAKE_OSX_ARCHITECTURES} STREQUAL "x86_64")
         set(ARTIST_BINARIES ${CMAKE_CURRENT_BINARY_DIR}/macos/x86_64/src/prebuilt_binaries)
         set(ARTIST_BINARIES_URL https://github.com/cycfi/artist/raw/prebuilt_binaries_0.90/macos/skia/x86_64/x86_64.zip)
         set(ARTIST_BINARIES_MD5 553b7073295cf9650c54a79478658761)
      endif()

      set(SKIA_LIBRARIES
         ${ARTIST_BINARIES}/libskia.a
         ${ARTIST_BINARIES}/libharfbuzz.a
         ${ARTIST_BINARIES}/libthird_party__libpng.a
         ${ARTIST_BINARIES}/libthird_party__zlib.a
         ${ARTIST_BINARIES}/libthird_party__libwebp.a
         ${ARTIST_BINARIES}/libthird_party__libwebp_libwebp_sse41.a
         ${ARTIST_BINARIES}/libthird_party__libjpeg-turbo_libjpeg.a
         ${ARTIST_BINARIES}/libmodules__skcms.a
      )

      ExternalProject_Add(prebuilt_binaries
         PREFIX "macos/${CMAKE_OSX_ARCHITECTURES}"
         URL ${ARTIST_BINARIES_URL}
         URL_MD5 ${ARTIST_BINARIES_MD5}
         CONFIGURE_COMMAND ""
         BUILD_COMMAND ""
         INSTALL_COMMAND ""
         BUILD_BYPRODUCTS ${SKIA_LIBRARIES}
      )

      find_package(OpenGL REQUIRED)

      set(ARTIST_DEPEPENDENCIES
         "${SKIA_LIBRARIES}"
         PkgConfig::fontconfig
         ${OPENGL_LIBRARIES}
      )

   elseif (MSVC)

      set(ARTIST_BINARIES ${CMAKE_CURRENT_BINARY_DIR}/windows-x64/src/prebuilt_binaries)
      set(SKIA_LIBRARY ${ARTIST_BINARIES}/skia.lib)
      set(HARFBUZZ_LIBRARY ${ARTIST_BINARIES}/harfbuzz.lib)
      set(FONTCONFIG_LIBRARY ${ARTIST_BINARIES}/fontconfig.lib)

      ExternalProject_Add(prebuilt_binaries
         PREFIX "windows-x64"
         URL https://github.com/cycfi/artist/releases/download/prebuilt-binaries/windows-x64.zip
         URL_MD5 69c3e3d54a065491f9a1915ece4c2a72
         CONFIGURE_COMMAND ""
         BUILD_COMMAND ""
         INSTALL_COMMAND ""
         BUILD_BYPRODUCTS ${SKIA_LIBRARY} ${HARFBUZZ_LIBRARY} ${FONTCONFIG_LIBRARY}
      )

      find_package(OpenGL REQUIRED)

      set(ARTIST_DEPEPENDENCIES
         "${SKIA_LIBRARY}"
         "${HARFBUZZ_LIBRARY}"
         "${FONTCONFIG_LIBRARY}"
         ${OPENGL_LIBRARIES}
      )

   elseif (UNIX)

      set(ARTIST_BINARIES ${CMAKE_CURRENT_BINARY_DIR}/linux-x64/src/prebuilt_binaries)
      set(SKIA_LIBRARY ${ARTIST_BINARIES}/libskia.a)

      find_package(Threads)
      find_package(PkgConfig REQUIRED)
      pkg_check_modules(harfbuzz REQUIRED IMPORTED_TARGET harfbuzz)
      pkg_check_modules(fontconfig REQUIRED IMPORTED_TARGET fontconfig)
      pkg_check_modules(freetype2 REQUIRED IMPORTED_TARGET freetype2)

      ExternalProject_Add(prebuilt_binaries
         PREFIX "linux-x64"
         URL https://github.com/cycfi/artist/releases/download/prebuilt-binaries/linux-x64.zip
         URL_MD5 2032e39233c9b627550fc0b5558fe335
         CONFIGURE_COMMAND ""
         BUILD_COMMAND ""
         INSTALL_COMMAND ""
         BUILD_BYPRODUCTS ${SKIA_LIBRARY}
      )

      set(ARTIST_DEPEPENDENCIES
         "${SKIA_LIBRARY}"
         ${CMAKE_DL_LIBS}
         PkgConfig::harfbuzz
         PkgConfig::fontconfig
         PkgConfig::freetype2
         Threads::Threads
      )

   endif()

endif()

###############################################################################
# Sources (and Resources)

set(ARTIST_SOURCES
   src/artist/rect.cpp
   src/artist/resources.cpp
   src/artist/svg_path.cpp
)

set(ARTIST_HEADERS
   include/artist/affine_transform.hpp
   include/artist/canvas.hpp
   include/artist/circle.hpp
   include/artist/color.hpp
   include/artist/detail
   include/artist/font.hpp
   include/artist/image.hpp
   include/artist/path.hpp
   include/artist/point.hpp
   include/artist/rect.hpp
   include/artist/resources.hpp
   include/artist/text_layout.hpp
)

if (APPLE AND ARTIST_QUARTZ_2D)
   set(ARTIST_IMPL
      impl/macos/quartz2d/canvas.mm
      impl/macos/quartz2d/image.mm
      impl/macos/quartz2d/font.mm
      impl/macos/quartz2d/text_layout.mm
      impl/macos/quartz2d/path.mm
   )
endif()

if (ARTIST_SKIA)

   if (APPLE)
      set(ARTIST_SKIA_PLATFORM_WINDOW_CONTEXT
         external/skia/tools/sk_app/mac/GLWindowContext_mac.mm
      )
      set_source_files_properties(${ARTIST_SKIA_PLATFORM_WINDOW_CONTEXT}
         PROPERTIES COMPILE_FLAGS -fno-objc-arc
      )
   elseif (MSVC)
      set(ARTIST_SKIA_PLATFORM_WINDOW_CONTEXT
         external/skia/tools/sk_app/win/GLWindowContext_win.cpp
      )
   endif()

   set(ARTIST_IMPL
      impl/skia/canvas.cpp
      impl/skia/image.cpp
      impl/skia/font.cpp
      impl/skia/text_layout.cpp
      impl/skia/path.cpp
      impl/skia/detail/harfbuzz.cpp
      external/skia/tools/sk_app/GLWindowContext.cpp
      external/skia/tools/sk_app/WindowContext.cpp
      ${ARTIST_SKIA_PLATFORM_WINDOW_CONTEXT}
   )
endif()

source_group("Source Files\\artist"
   FILES
   ${ARTIST_SOURCES}
)

source_group("Source Files\\impl"
   FILES
   ${ARTIST_IMPL}
)

source_group("Header Files\\artist"
   FILES
   ${ARTIST_HEADERS}
)

add_library(artist)

if (NOT MSVC)
   find_package(PkgConfig REQUIRED)
endif()

# Additional dependencies
if (ARTIST_SKIA AND UNIX AND NOT APPLE)
   pkg_check_modules(fontconfig REQUIRED IMPORTED_TARGET fontconfig)
   target_link_libraries(artist PUBLIC PkgConfig::fontconfig)
endif()

add_dependencies(artist libunibreak)

if (ARTIST_SKIA)
  add_dependencies(artist prebuilt_binaries)
endif()

target_sources(artist
   PRIVATE ${ARTIST_SOURCES} ${ARTIST_IMPL}
   PUBLIC ${ARTIST_HEADERS}
)

target_include_directories(
   artist
   PUBLIC
      include
      infra/include
      infra/external/filesystem/include/
      external/libunibreak/include/
)

if (ARTIST_SKIA)
   target_include_directories(
      artist
      PUBLIC
         external/skia
         external/skia/include
         external/skia/include/core
         external/skia/include/config
         external/skia/include/utils
         external/skia/include/gpu
         external/skia/include/codec
         external/skia/include/effects
         external/skia/include/ports
         external/skia/src/gpu
         external/skia/modules/skshaper/include
         external/filesystem/include/
         external/harfbuzz/include/
         external/fontconfig/include/
   )
   target_compile_definitions(
      artist
      PUBLIC
         ARTIST_SKIA
         SK_RELEASE
   )
endif()

if (ARTIST_QUARTZ_2D)
   target_compile_definitions(
      artist
      PUBLIC
         ARTIST_QUARTZ_2D
   )
endif()

if (ARTIST_SKIA AND APPLE)
   target_compile_definitions(
      artist
      PUBLIC
        SK_GL
   )
endif()

target_compile_features(artist PUBLIC cxx_std_17)

if (IPO_SUPPORTED AND CMAKE_BUILD_TYPE STREQUAL "Release")
   message(STATUS "Enabling LTO for artist")
   set_target_properties(artist PROPERTIES INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

if (NOT MSVC)
   find_package(PkgConfig REQUIRED)
endif()

###############################################################################
# Get rid of certain warnings

target_compile_options(artist PRIVATE
   $<$<CXX_COMPILER_ID:GNU>:-Wall -Wextra -Wpedantic -ftemplate-backtrace-limit=0>
   $<$<CXX_COMPILER_ID:Clang>:-Wall -Wpedantic -ftemplate-backtrace-limit=0>
   $<$<CXX_COMPILER_ID:AppleClang>:-Wall -Wpedantic -ftemplate-backtrace-limit=0>
   $<$<CXX_COMPILER_ID:MSVC>:/W4 /wd4244 /wd4305 /wd4996 /wd4267 /wd4018 /wd5030 /wd4201 /utf-8>
)

###############################################################################
# Global options

if (APPLE)
   target_compile_definitions(artist PRIVATE
      ARTIST_CLASS_PREFIX=${ARTIST_CLASS_PREFIX}
   )
   target_compile_options(artist PUBLIC "-fobjc-arc")
elseif (WIN32)
   target_compile_definitions(artist
      PUBLIC
         WIN32_LEAN_AND_MEAN
         NOMINMAX
         _UNICODE
   )
   set_property(TARGET artist PROPERTY
      MSVC_RUNTIME_LIBRARY "MultiThreaded"
   )
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
   set(DEBUG_FLAG true)
else()
   set(DEBUG_FLAG false)
endif()

target_compile_definitions(artist
   PUBLIC
      ARTIST_DEBUG=${DEBUG_FLAG}
)

###############################################################################
# Libraries and linking

target_link_libraries(artist
   PRIVATE
   libunibreak
)

if (ARTIST_SKIA)
   target_link_libraries(artist
   PRIVATE
      "${ARTIST_DEPEPENDENCIES}"
   )
endif()

if (UNIX OR (WIN32 AND NOT MSVC))
endif()

